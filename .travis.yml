jobs:
  include:
    - os: linux
      dist: bionic
    - os: osx

language: c
install:
- if [ "$TRAVIS_OS_NAME" = "osx" ]; then export conda_url=https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh; fi
- if [ "$TRAVIS_OS_NAME" = "linux" ]; then export conda_url=https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh; fi
- wget $conda_url -O miniconda.sh
- bash miniconda.sh -b -p $HOME/miniconda
- source "$HOME/miniconda/etc/profile.d/conda.sh"
- hash -r
- conda config --set always_yes yes --set changeps1 no
- conda update -q conda
- conda info -a
- conda install -c conda-forge mamba
- if [ "$TRAVIS_OS_NAME" = "osx" ]; then export toolchain=clangxx_osx-64; fi
- if [ "$TRAVIS_OS_NAME" = "linux" ]; then export toolchain=gxx_linux-64; fi
- mamba create -q -n test-environment -c conda-forge -c bioconda -y meson clang $toolchain samtools
- conda activate test-environment
- if [ "$TRAVIS_OS_NAME" = "linux" ]; then env CC=clang CXX=clang meson setup --buildtype=release --unity on builddir; fi
- if [ "$TRAVIS_OS_NAME" = "osx" ]; then meson setup --buildtype=release --unity on builddir; fi
- cd builddir
- meson compile
- meson test
script:
- echo "done"
before_deploy:
- echo "Auto release generated by Travis CI on "$(date +'%Y:%m:%d at %H:%M:%S') >
  release_notes
- export release_name="PretextMap-"$(git describe --tags)
- mkdir $release_name
- cp -r $TRAVIS_BUILD_DIR/*.{cpp,h} $TRAVIS_BUILD_DIR/meson.build $TRAVIS_BUILD_DIR/wrapper $TRAVIS_BUILD_DIR/libdeflate $TRAVIS_BUILD_DIR/mpc $release_name/
- tar -czf Source_with_Submodules.tar.gz $release_name
deploy:
  edge: true
  provider: releases
  token: "$GITHUB_TOKEN"
  file: 
  - release_notes
  - Source_with_Submodules.tar.gz
  name: "$release_name"
  body: Auto-generated release by Travis CI
  skip_cleanup: true
  prerelease: true
  on:
    tags: true
    condition: $TRAVIS_OS_NAME = linux
env:
  secure: iggg+mkQTGL6Lde6midJxHI61QReWAywgejsWglWpp6QENL61hqPxAjyStPOUPiK0u6K/JkZtXeyf99YHfOe6mepX9FqpGnAv1cqVa7kRymgmCy2yBh2Gh+RotWVu5I7boVpEY903OmhOgG024aZpJM1ckAmKG/5B9+o47Y84sqWFaquXNb9EScnSpStcZNq+JckUs5PDLZRyN7A0gdq7fdNMPvwyqPRd56/5DA8dFyowKmSnKwzN24LChMqEX/R4evY97MK4RFOPl1efZMVt7CrbB4N/dOWPzunIMVjUaj6XW5GSwUbVM44T2JJ+LA3KjBqt7PKqlnqw/o9R2qbn44apmJu5paGeICWp+PeF6ubr2egJVEPYg14vIP9Wr7GJqfOKSiWAZdw/L2LVvGd+VPpAn3M2kUhUMDLKyWsYAXD6uZ7Wdyy0YmoRttg/2U/9vxnUAW+DlYUrOAc0vT0SIzd7q0EQHPucqpzHxoVQANZ9EnZcZ171Bg+tnRVAPkjhjVefUxqZSc4XNf936wJXorBUHNPW28aB5p2JXiOk/9unKeOpTXI/I/KMauyq9mExUrS3dzv6+X98V2HO8mmSv1q1DGY6chzz0zlnnvIOJfJ5oVr42VhuwdygyCPWhxUxRI/fBM9qis742saZ/IVkrLnI2H8nlLyQG4dlK9h5Cc=
